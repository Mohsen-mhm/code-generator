<?php

namespace {{ namespace }};

use {{ modelNamespace }}\{{ modelName }};
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
{{ foreignKeyImports }}

class {{ class }} extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        ${{ modelVariablePlural }} = {{ modelName }}::latest()->paginate(10);
        
        return view('{{ viewName }}.index', compact('{{ modelVariablePlural }}'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        {{ foreignKeyVariables }}
        
        return view('{{ viewName }}.create'{{ createViewParams }});
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate({{ validationRules }});
        
        // Handle date fields
        foreach ($validated as $key => $value) {
            if (strpos($key, 'date') !== false || strpos($key, 'time') !== false) {
                if (!empty($value)) {
                    $validated[$key] = Carbon::parse($value);
                }
            }
        }
        
        {{ modelName }}::create($validated);
        
        return redirect()->route('{{ viewName }}.index')->with('success', '{{ modelName }} created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show({{ modelName }} ${{ modelVariableSingular }})
    {
        return view('{{ viewName }}.show', compact('{{ modelVariableSingular }}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{ modelName }} ${{ modelVariableSingular }})
    {
        {{ foreignKeyVariables }}
        
        return view('{{ viewName }}.edit', {{ editViewParams }});
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, {{ modelName }} ${{ modelVariableSingular }})
    {
        $validated = $request->validate({{ validationRules }});
        
        // Handle date fields
        foreach ($validated as $key => $value) {
            if (strpos($key, 'date') !== false || strpos($key, 'time') !== false) {
                if (!empty($value)) {
                    $validated[$key] = Carbon::parse($value);
                }
            }
        }
        
        ${{ modelVariableSingular }}->update($validated);
        
        return redirect()->route('{{ viewName }}.index')->with('success', '{{ modelName }} updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ modelName }} ${{ modelVariableSingular }})
    {
        ${{ modelVariableSingular }}->delete();
        
        return redirect()->route('{{ viewName }}.index')->with('success', '{{ modelName }} deleted successfully.');
    }
} 